// Code generated by protoc-gen-go. DO NOT EDIT.
// source: types.proto

package pbtracker

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Node message
type NodeMsg struct {
	ID                   int32            `protobuf:"varint,1,opt,name=iD,proto3" json:"iD,omitempty"`
	NodeID               string           `protobuf:"bytes,2,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	PubKey               string           `protobuf:"bytes,3,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
	Owner                string           `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty"`
	ProfitAcc            string           `protobuf:"bytes,5,opt,name=profitAcc,proto3" json:"profitAcc,omitempty"`
	PoolID               string           `protobuf:"bytes,6,opt,name=poolID,proto3" json:"poolID,omitempty"`
	PoolOwner            string           `protobuf:"bytes,7,opt,name=poolOwner,proto3" json:"poolOwner,omitempty"`
	Quota                int64            `protobuf:"varint,8,opt,name=quota,proto3" json:"quota,omitempty"`
	Addrs                []string         `protobuf:"bytes,9,rep,name=addrs,proto3" json:"addrs,omitempty"`
	CPU                  int32            `protobuf:"varint,10,opt,name=cPU,proto3" json:"cPU,omitempty"`
	Memory               int32            `protobuf:"varint,11,opt,name=memory,proto3" json:"memory,omitempty"`
	Bandwidth            int32            `protobuf:"varint,12,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
	MaxDataSpace         int64            `protobuf:"varint,13,opt,name=maxDataSpace,proto3" json:"maxDataSpace,omitempty"`
	AssignedSpace        int64            `protobuf:"varint,14,opt,name=assignedSpace,proto3" json:"assignedSpace,omitempty"`
	ProductiveSpace      int64            `protobuf:"varint,15,opt,name=productiveSpace,proto3" json:"productiveSpace,omitempty"`
	UsedSpace            int64            `protobuf:"varint,16,opt,name=usedSpace,proto3" json:"usedSpace,omitempty"`
	Weight               float64          `protobuf:"fixed64,17,opt,name=weight,proto3" json:"weight,omitempty"`
	Valid                int32            `protobuf:"varint,18,opt,name=valid,proto3" json:"valid,omitempty"`
	Relay                int32            `protobuf:"varint,19,opt,name=relay,proto3" json:"relay,omitempty"`
	Status               int32            `protobuf:"varint,20,opt,name=status,proto3" json:"status,omitempty"`
	Timestamp            int64            `protobuf:"varint,21,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Version              int32            `protobuf:"varint,22,opt,name=version,proto3" json:"version,omitempty"`
	Rebuilding           int32            `protobuf:"varint,23,opt,name=rebuilding,proto3" json:"rebuilding,omitempty"`
	RealSpace            int64            `protobuf:"varint,24,opt,name=realSpace,proto3" json:"realSpace,omitempty"`
	Tx                   int64            `protobuf:"varint,25,opt,name=tx,proto3" json:"tx,omitempty"`
	Rx                   int64            `protobuf:"varint,26,opt,name=rx,proto3" json:"rx,omitempty"`
	Ext                  string           `protobuf:"bytes,27,opt,name=ext,proto3" json:"ext,omitempty"`
	Uspaces              map[string]int64 `protobuf:"bytes,28,rep,name=uspaces,proto3" json:"uspaces,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ManualWeight         int32            `protobuf:"varint,29,opt,name=manualWeight,proto3" json:"manualWeight,omitempty"`
	Unreadable           bool             `protobuf:"varint,30,opt,name=unreadable,proto3" json:"unreadable,omitempty"`
	Hash                 string           `protobuf:"bytes,31,opt,name=hash,proto3" json:"hash,omitempty"`
	BlCount              int32            `protobuf:"varint,32,opt,name=blCount,proto3" json:"blCount,omitempty"`
	Filing               bool             `protobuf:"varint,33,opt,name=filing,proto3" json:"filing,omitempty"`
	AllocatedSpace       int64            `protobuf:"varint,34,opt,name=allocatedSpace,proto3" json:"allocatedSpace,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *NodeMsg) Reset()         { *m = NodeMsg{} }
func (m *NodeMsg) String() string { return proto.CompactTextString(m) }
func (*NodeMsg) ProtoMessage()    {}
func (*NodeMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{0}
}

func (m *NodeMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeMsg.Unmarshal(m, b)
}
func (m *NodeMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeMsg.Marshal(b, m, deterministic)
}
func (m *NodeMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeMsg.Merge(m, src)
}
func (m *NodeMsg) XXX_Size() int {
	return xxx_messageInfo_NodeMsg.Size(m)
}
func (m *NodeMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeMsg.DiscardUnknown(m)
}

var xxx_messageInfo_NodeMsg proto.InternalMessageInfo

func (m *NodeMsg) GetID() int32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *NodeMsg) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

func (m *NodeMsg) GetPubKey() string {
	if m != nil {
		return m.PubKey
	}
	return ""
}

func (m *NodeMsg) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *NodeMsg) GetProfitAcc() string {
	if m != nil {
		return m.ProfitAcc
	}
	return ""
}

func (m *NodeMsg) GetPoolID() string {
	if m != nil {
		return m.PoolID
	}
	return ""
}

func (m *NodeMsg) GetPoolOwner() string {
	if m != nil {
		return m.PoolOwner
	}
	return ""
}

func (m *NodeMsg) GetQuota() int64 {
	if m != nil {
		return m.Quota
	}
	return 0
}

func (m *NodeMsg) GetAddrs() []string {
	if m != nil {
		return m.Addrs
	}
	return nil
}

func (m *NodeMsg) GetCPU() int32 {
	if m != nil {
		return m.CPU
	}
	return 0
}

func (m *NodeMsg) GetMemory() int32 {
	if m != nil {
		return m.Memory
	}
	return 0
}

func (m *NodeMsg) GetBandwidth() int32 {
	if m != nil {
		return m.Bandwidth
	}
	return 0
}

func (m *NodeMsg) GetMaxDataSpace() int64 {
	if m != nil {
		return m.MaxDataSpace
	}
	return 0
}

func (m *NodeMsg) GetAssignedSpace() int64 {
	if m != nil {
		return m.AssignedSpace
	}
	return 0
}

func (m *NodeMsg) GetProductiveSpace() int64 {
	if m != nil {
		return m.ProductiveSpace
	}
	return 0
}

func (m *NodeMsg) GetUsedSpace() int64 {
	if m != nil {
		return m.UsedSpace
	}
	return 0
}

func (m *NodeMsg) GetWeight() float64 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *NodeMsg) GetValid() int32 {
	if m != nil {
		return m.Valid
	}
	return 0
}

func (m *NodeMsg) GetRelay() int32 {
	if m != nil {
		return m.Relay
	}
	return 0
}

func (m *NodeMsg) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *NodeMsg) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *NodeMsg) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *NodeMsg) GetRebuilding() int32 {
	if m != nil {
		return m.Rebuilding
	}
	return 0
}

func (m *NodeMsg) GetRealSpace() int64 {
	if m != nil {
		return m.RealSpace
	}
	return 0
}

func (m *NodeMsg) GetTx() int64 {
	if m != nil {
		return m.Tx
	}
	return 0
}

func (m *NodeMsg) GetRx() int64 {
	if m != nil {
		return m.Rx
	}
	return 0
}

func (m *NodeMsg) GetExt() string {
	if m != nil {
		return m.Ext
	}
	return ""
}

func (m *NodeMsg) GetUspaces() map[string]int64 {
	if m != nil {
		return m.Uspaces
	}
	return nil
}

func (m *NodeMsg) GetManualWeight() int32 {
	if m != nil {
		return m.ManualWeight
	}
	return 0
}

func (m *NodeMsg) GetUnreadable() bool {
	if m != nil {
		return m.Unreadable
	}
	return false
}

func (m *NodeMsg) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *NodeMsg) GetBlCount() int32 {
	if m != nil {
		return m.BlCount
	}
	return 0
}

func (m *NodeMsg) GetFiling() bool {
	if m != nil {
		return m.Filing
	}
	return false
}

func (m *NodeMsg) GetAllocatedSpace() int64 {
	if m != nil {
		return m.AllocatedSpace
	}
	return 0
}

type SignMessage struct {
	AccountName          string   `protobuf:"bytes,1,opt,name=accountName,proto3" json:"accountName,omitempty"`
	Data                 []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Signature            string   `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignMessage) Reset()         { *m = SignMessage{} }
func (m *SignMessage) String() string { return proto.CompactTextString(m) }
func (*SignMessage) ProtoMessage()    {}
func (*SignMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{1}
}

func (m *SignMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignMessage.Unmarshal(m, b)
}
func (m *SignMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignMessage.Marshal(b, m, deterministic)
}
func (m *SignMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignMessage.Merge(m, src)
}
func (m *SignMessage) XXX_Size() int {
	return xxx_messageInfo_SignMessage.Size(m)
}
func (m *SignMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_SignMessage.DiscardUnknown(m)
}

var xxx_messageInfo_SignMessage proto.InternalMessageInfo

func (m *SignMessage) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

func (m *SignMessage) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SignMessage) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func init() {
	proto.RegisterType((*NodeMsg)(nil), "pbtracker.NodeMsg")
	proto.RegisterMapType((map[string]int64)(nil), "pbtracker.NodeMsg.UspacesEntry")
	proto.RegisterType((*SignMessage)(nil), "pbtracker.SignMessage")
}

func init() { proto.RegisterFile("types.proto", fileDescriptor_d938547f84707355) }

var fileDescriptor_d938547f84707355 = []byte{
	// 607 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x94, 0xcf, 0x53, 0xdb, 0x3a,
	0x10, 0xc7, 0xc7, 0x09, 0x10, 0xa2, 0x84, 0x1f, 0x4f, 0x8f, 0xc7, 0xdb, 0x52, 0x0a, 0x6e, 0xa6,
	0xd3, 0xf1, 0x29, 0x87, 0xf6, 0xd2, 0x72, 0xeb, 0x34, 0x3d, 0x30, 0x1d, 0x68, 0xc7, 0x0c, 0xd3,
	0xf3, 0xda, 0x16, 0x89, 0x06, 0xc7, 0x72, 0x25, 0x19, 0x92, 0x7f, 0xb8, 0x7f, 0x47, 0x67, 0x57,
	0x0e, 0x09, 0xdc, 0xf4, 0xfd, 0x78, 0xf5, 0x5d, 0xed, 0x6a, 0x65, 0x31, 0xf0, 0xcb, 0x5a, 0xb9,
	0x71, 0x6d, 0x8d, 0x37, 0xb2, 0x5f, 0x67, 0xde, 0x62, 0x7e, 0xaf, 0xec, 0xe8, 0x4f, 0x4f, 0xf4,
	0xae, 0x4d, 0xa1, 0xae, 0xdc, 0x54, 0xee, 0x8b, 0x8e, 0x9e, 0x40, 0x14, 0x47, 0xc9, 0x76, 0xda,
	0xd1, 0x13, 0x79, 0x2c, 0x76, 0x2a, 0x53, 0xa8, 0xcb, 0x09, 0x74, 0xe2, 0x28, 0xe9, 0xa7, 0xad,
	0x22, 0x5e, 0x37, 0xd9, 0x77, 0xb5, 0x84, 0x6e, 0xe0, 0x41, 0xc9, 0x23, 0xb1, 0x6d, 0x1e, 0x2b,
	0x65, 0x61, 0x8b, 0x71, 0x10, 0xf2, 0x54, 0xf4, 0x6b, 0x6b, 0xee, 0xb4, 0xff, 0x92, 0xe7, 0xb0,
	0xcd, 0x5f, 0xd6, 0x80, 0xbd, 0x8c, 0x29, 0x2f, 0x27, 0xb0, 0xd3, 0x7a, 0xb1, 0xe2, 0x5d, 0xc6,
	0x94, 0x3f, 0xd8, 0xaf, 0xd7, 0xee, 0x5a, 0x01, 0xca, 0xf4, 0xbb, 0x31, 0x1e, 0x61, 0x37, 0x8e,
	0x92, 0x6e, 0x1a, 0x04, 0x51, 0x2c, 0x0a, 0xeb, 0xa0, 0x1f, 0x77, 0x29, 0x3f, 0x0b, 0x79, 0x28,
	0xba, 0xf9, 0xcf, 0x5b, 0x10, 0x5c, 0x16, 0x2d, 0x29, 0xe7, 0x5c, 0xcd, 0x8d, 0x5d, 0xc2, 0x80,
	0x61, 0xab, 0x28, 0x67, 0x86, 0x55, 0xf1, 0xa8, 0x0b, 0x3f, 0x83, 0x21, 0x7f, 0x5a, 0x03, 0x39,
	0x12, 0xc3, 0x39, 0x2e, 0x26, 0xe8, 0xf1, 0xa6, 0xc6, 0x5c, 0xc1, 0x1e, 0xa7, 0x7e, 0xc6, 0xe4,
	0x3b, 0xb1, 0x87, 0xce, 0xe9, 0x69, 0xa5, 0x8a, 0x10, 0xb4, 0xcf, 0x41, 0xcf, 0xa1, 0x4c, 0xc4,
	0x41, 0x6d, 0x4d, 0xd1, 0xe4, 0x5e, 0x3f, 0xa8, 0x10, 0x77, 0xc0, 0x71, 0x2f, 0x31, 0x9d, 0xa8,
	0x71, 0x2b, 0xaf, 0x43, 0x8e, 0x59, 0x03, 0xaa, 0xe3, 0x51, 0xe9, 0xe9, 0xcc, 0xc3, 0x3f, 0x71,
	0x94, 0x44, 0x69, 0xab, 0xa8, 0x0f, 0x0f, 0x58, 0xea, 0x02, 0x24, 0xd7, 0x10, 0x04, 0x51, 0xab,
	0x4a, 0x5c, 0xc2, 0xbf, 0x81, 0xb2, 0x20, 0x0f, 0xe7, 0xd1, 0x37, 0x0e, 0x8e, 0x42, 0x2f, 0x82,
	0xa2, 0xcc, 0x5e, 0xcf, 0x95, 0xf3, 0x38, 0xaf, 0xe1, 0xbf, 0x90, 0xf9, 0x09, 0x48, 0x10, 0xbd,
	0x07, 0x65, 0x9d, 0x36, 0x15, 0x1c, 0xf3, 0xb6, 0x95, 0x94, 0x67, 0x42, 0x58, 0x95, 0x35, 0xba,
	0x2c, 0x74, 0x35, 0x85, 0xff, 0xf9, 0xe3, 0x06, 0x21, 0x5f, 0xab, 0xb0, 0x0c, 0x15, 0x41, 0xf0,
	0x7d, 0x02, 0x34, 0x81, 0x7e, 0x01, 0xaf, 0x18, 0x77, 0xfc, 0x82, 0xb4, 0x5d, 0xc0, 0x49, 0xd0,
	0x76, 0x41, 0x77, 0xa9, 0x16, 0x1e, 0x5e, 0xf3, 0x3c, 0xd0, 0x52, 0x7e, 0x16, 0xbd, 0xc6, 0xd1,
	0x5e, 0x07, 0xa7, 0x71, 0x37, 0x19, 0x7c, 0x38, 0x1f, 0x3f, 0x0d, 0xf7, 0xb8, 0x1d, 0xec, 0xf1,
	0x6d, 0x88, 0xf8, 0x56, 0x79, 0xbb, 0x4c, 0x57, 0xf1, 0xe1, 0x42, 0xab, 0x06, 0xcb, 0x5f, 0xa1,
	0x89, 0x6f, 0xf8, 0xb0, 0xcf, 0x18, 0x95, 0xd3, 0x54, 0x56, 0x61, 0x81, 0x59, 0xa9, 0xe0, 0x2c,
	0x8e, 0x92, 0xdd, 0x74, 0x83, 0x48, 0x29, 0xb6, 0x66, 0xe8, 0x66, 0x70, 0xce, 0x27, 0xe2, 0x35,
	0x35, 0x27, 0x2b, 0xbf, 0x9a, 0xa6, 0xf2, 0x10, 0x87, 0xe6, 0xb4, 0x92, 0x9a, 0x7d, 0xa7, 0x4b,
	0x6a, 0xcc, 0x5b, 0x76, 0x6a, 0x95, 0x7c, 0x2f, 0xf6, 0xb1, 0x2c, 0x4d, 0x8e, 0x7e, 0x75, 0xd7,
	0x23, 0x2e, 0xf9, 0x05, 0x3d, 0xb9, 0x10, 0xc3, 0xcd, 0x52, 0xa8, 0x1d, 0xf7, 0x6a, 0xc9, 0x2f,
	0xb6, 0x9f, 0xd2, 0xb2, 0xbd, 0xfa, 0x46, 0xf1, 0x8b, 0xed, 0xa6, 0x41, 0x5c, 0x74, 0x3e, 0x45,
	0x23, 0x14, 0x83, 0x1b, 0x3d, 0xad, 0xae, 0x94, 0x73, 0x38, 0x55, 0x32, 0x16, 0x03, 0xcc, 0x73,
	0x3a, 0xd5, 0x35, 0xce, 0x55, 0x6b, 0xb1, 0x89, 0xa8, 0xb4, 0x02, 0x3d, 0xb2, 0xd3, 0x30, 0xe5,
	0x35, 0xdd, 0x1e, 0x0d, 0x32, 0xfa, 0xc6, 0xaa, 0xf6, 0xf1, 0xaf, 0x41, 0xb6, 0xc3, 0x7f, 0x97,
	0x8f, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xe8, 0x24, 0x4e, 0x8e, 0x6c, 0x04, 0x00, 0x00,
}
